{"version":3,"sources":["GetSpells.js","GetUrl.js","Spells.js","App.js","serviceWorker.js","index.js"],"names":["GetSpells","state","spellInfo","charClass","axios","url","this","props","method","responseType","then","response","setState","data","classes","i","length","console","log","className","name","level","material","desc","higher_level","Component","GetUrl","handleClick","e","target","value","isShowing","onClick","Spells","spells","results","map","spell","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sSAoEeA,G,uDA3DX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAW,GACXC,UAAW,IAJN,E,gEAQO,IAAD,OAEfC,IAAM,CACFC,IAAKC,KAAKC,MAAMF,IAChBG,OAAQ,MACRC,aAAc,SACfC,MAAM,SAACC,GAEN,EAAKC,SAAS,CACVV,UAAWS,EAASE,KACpBV,UAAW,CAACQ,EAASE,KAAKC,WAc9B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKd,MAAME,UAAUa,OAAQD,IAC7CE,QAAQC,IAAIH,Q,+BASpB,OACI,yBAAKI,UAAU,YACP,4BAAKb,KAAKL,MAAMC,UAAUkB,MAC1B,qCAAWd,KAAKL,MAAMC,UAAUmB,OAGhC,gDAAsBf,KAAKL,MAAMC,UAAUoB,UAC3C,2BAAIhB,KAAKL,MAAMC,UAAUqB,MACzB,2BAAIjB,KAAKL,MAAMC,UAAUsB,mB,GApDrBC,cCmCTC,E,kDA/Bb,aAAc,IAAD,8BACX,gBAOFC,YAAc,SAACC,GAEX,EAAKhB,SAAS,CACVP,IAAK,0BAA4BuB,EAAEC,OAAOC,MAC1CC,WAAW,EAAK9B,MAAM8B,aAV5B,EAAK9B,MAAQ,CACXI,IAAK,GACL0B,WAAW,GAJF,E,qDAkBP,OACI,kBAAC,WAAD,KACI,4BAAQC,QAAS1B,KAAKqB,YAAaG,MAAOxB,KAAKC,MAAMuB,OAAQxB,KAAKC,MAAMa,MAEtEd,KAAKL,MAAM8B,UAAY,kBAAC,EAAD,CAAW1B,IAAKC,KAAKL,MAAMI,MAAQ,U,GAxBvDoB,aCqDNQ,E,kDAnDb,aAAc,IAAD,8BACX,gBACKhC,MAAQ,CACXiC,OAAQ,IAHC,E,gEAQO,IAAD,OACjB9B,IAAM,CACJC,IAAK,qCACLG,OAAQ,MACRC,aAAc,SACbC,MAAM,SAACC,GAER,EAAKC,SAAS,CACZsB,OAAQvB,EAASE,KAAKsB,e,+BAa1B,OACI,kBAAC,WAAD,KAGI7B,KAAKL,MAAMiC,OAAOE,KAAK,SAACC,EAAOC,GAC3B,OACA,kBAAC,WAAD,CAAUC,IAAKD,GACX,kBAAC,EAAD,CAAQjC,IAAKgC,EAAMhC,IAAKyB,MAAOO,EAAMhC,IAAKe,KAAMiB,EAAMjB,WAO5Dd,KAAKL,MAAM8B,UAAY,kBAAC,EAAD,CAAW1B,IAAKC,KAAKL,MAAMI,MAAQ,U,GA7CnDoB,aCmBNe,E,uKAXX,OACE,yBAAKrB,UAAU,eACb,gDAEA,kBAAC,EAAD,W,GAfUM,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.bc494b18.chunk.js","sourcesContent":["// GetSpells.js\n\nimport React, { Component } from 'react';\n// import GetUrl from './GetUrl';\nimport axios from 'axios';\n\n\nclass GetSpells extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            spellInfo: '',\n            charClass: []\n        }\n    }\n\n    componentDidMount(){\n        \n        axios({\n            url: this.props.url,\n            method: 'GET',\n            responseType: 'json',\n        }).then( (response) => {\n\n            this.setState({\n                spellInfo: response.data,\n                charClass: [response.data.classes]\n            });\n            // this.state.charClass.filter( (data) => {\n            //     return (\n            //     data.name === 'Wizard' ? <p>{data.name}</p> : null  \n            // )})\n            // const classes = [];\n\n            // for (let key in this.state.charClass) {\n            //     classes.push({\n            //         name: response.data.classes,\n            //         id: key\n            //     })\n            // };\n            for (let i = 0; i > this.state.charClass.length; i++){\n                console.log(i)\n            }\n\n            \n        })\n    }\n\n    \n    render(){\n        return(\n            <div className=\"spellBox\">\n                    <h2>{this.state.spellInfo.name}</h2>\n                    <h3>Level {this.state.spellInfo.level}</h3>\n                    \n\n                    <p>Materials needed: {this.state.spellInfo.material}</p>\n                    <p>{this.state.spellInfo.desc}</p>\n                    <p>{this.state.spellInfo.higher_level}</p>\n            </div>\n                \n        )                \n                \n    }\n\n}\n\nexport default GetSpells;\n","// GetUrl.js\n\nimport React, { Component, Fragment } from 'react';\n// import axios from 'axios';\nimport GetSpells from \"./GetSpells\";\nimport './App.css';\n// import Spells from './Spells';\n\n\nclass GetUrl extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      url: '',\n      isShowing: false\n    }\n  }\n\n  handleClick = (e) => {\n    //   console.log(e.target.value);\n      this.setState({\n          url: \"https://www.dnd5eapi.co\" + e.target.value,\n          isShowing: this.state.isShowing ? false : true\n      })\n    }\n\n\n    render(){\n        return (\n            <Fragment>\n                <button onClick={this.handleClick} value={this.props.value}>{this.props.name}</button>\n                {\n                  this.state.isShowing ? <GetSpells url={this.state.url}/>: null\n                }\n\n            </Fragment>\n        )\n    }\n}\n\n\nexport default GetUrl;","//GetUrl.js\n\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport GetUrl from './GetUrl';\nimport GetSpells from \"./GetSpells\";\n\n\nclass Spells extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      spells: [],\n    }\n  }\n\n\n  componentDidMount(){\n    axios({\n      url: 'https://www.dnd5eapi.co/api/spells',\n      method: 'GET',\n      responseType: 'json',\n    }).then( (response) => {\n      // console.log(response);\n      this.setState({\n        spells: response.data.results,\n      })\n    })\n  }\n\n  \n\n  // handleClick = (e) => {\n  //     console.log(e.target.innerText)\n  // }\n\n\n  render(){\n    return (\n        <Fragment>\n\n            {\n            this.state.spells.map( (spell, index) => {\n                return(\n                <Fragment key={index}>\n                    <GetUrl url={spell.url} value={spell.url} name={spell.name}/>\n                </Fragment>\n                )\n            })\n            }\n\n            {\n              this.state.isShowing ? <GetSpells url={this.state.url}/>: null\n            }\n\n        </Fragment>\n    )\n  }\n}\n\nexport default Spells;","import React, { Component } from 'react';\n// import axios from 'axios';\nimport Spells from './Spells'\nimport './App.css';\n\n\nclass App extends Component {\n\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     spells: [],\n  //   }\n  // }\n\n\n  render(){\n    return (\n      <div className=\"App wrapper\">\n        <h1>Spell Compendium</h1>\n\n        <Spells />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}