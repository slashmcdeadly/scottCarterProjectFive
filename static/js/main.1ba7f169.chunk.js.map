{"version":3,"sources":["ClassButtons.js","LevelButtons.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["ClassButtons","className","onClick","this","props","handleClick","disabled","value","Component","LevelButtons","storeLevel","alsoDisabled","Info","name","material","desc","higher","App","charClass","target","setState","isShowing","event","isAlsoShowing","levelDisplay","resetShowing","axios","url","state","method","responseType","then","spells","data","results","changingText","count","spellInfo","e","window","scroll","top","spell","spellName","materials","description","higherLevel","spellBoxShowing","reset","location","reload","document","title","map","index","key","href","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ba7f169.chunk.js","sourcesContent":["// ClassButtons.js\n\nimport React, { Component } from 'react';\n\nclass ClassButtons extends Component{\n\n    render(){\n        return(\n            <div className=\"classButtons\">\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"bard\">Bard</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"cleric\">Cleric</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"druid\">Druid</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"ranger\">Ranger</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"sorcerer\">Sorcerer</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"warlock\">Warlock</button>\n                <button onClick={this.props.handleClick} disabled={this.props.disabled} value=\"wizard\">Wizard</button>\n            </div>\n        )\n    }\n}\n\nexport default ClassButtons;","// LevelButtons.js\n\nimport React, { Component } from 'react';\n\nclass LevelButtons extends Component {\n    render(){\n        return(\n            <div className=\"spellLevel\">\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"0\">0</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"1\">1</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"2\">2</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"3\">3</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"4\">4</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"5\">5</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"6\">6</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"7\">7</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"8\">8</button>\n              <button onClick={this.props.storeLevel} disabled={this.props.alsoDisabled} value=\"9\">9</button>\n            </div>\n        )\n    }\n}\n\nexport default LevelButtons;","// Info.js\n\nimport React, { Component, Fragment } from 'react';\n\nclass Info extends Component {\n\n    render(){\n        return(\n            <Fragment>\n                <div className=\"spellBox\">\n                    <section>\n                        <h2>{this.props.name}</h2>          \n                        <p>Materials needed: {this.props.material}</p>\n                        <p>{this.props.desc}</p>\n                        <p>{this.props.higher}</p>\n                    </section>\n                </div>     \n            </Fragment>\n        )                         \n    }      \n}\n\nexport default Info;","import React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\nimport ClassButtons from \"./ClassButtons\";\nimport LevelButtons from \"./LevelButtons\";\nimport Info from \"./Info\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      spells: [],\n      charClass: \"\",\n      isShowing: false,\n      isAlsoShowing: false,\n      spellBoxShowing: false,\n      resetShowing: false,\n      disabled: false,\n      name: \"\",\n      materials: \"\",\n      description: \"\",\n      count: 0,\n      higherLevel: \"\",\n      changingText:\n        \"Choose a Dungeons and Dragons 5th Edition Character Class and Spell Level to see the spells for that class and spell level. Click on the spell name to show spell info!\",\n      levelDisplay: \"\",\n    };\n  }\n  // change document title\n  componentWillMount() {\n    document.title = \"Spell Compendium\";\n  }\n\n  // set the state for the character class to used in an axios call\n  handleClick = (charClass) => {\n    charClass = charClass.target.value;\n    this.setState({\n      charClass,\n      isShowing: true, //show level buttons\n      disabled: true, //disable the buttons to hide them\n    });\n  };\n  // store the level value to be used in axios call\n  storeLevel = (event) => {\n    this.setState({\n      isAlsoShowing: true,\n      levelDisplay: \"Level \" + event.target.value,\n      resetShowing: true,\n    });\n    // call the api with the button values as part of the search\n    axios({\n      url:\n        \"https://www.dnd5eapi.co/api/classes/\" +\n        this.state.charClass +\n        \"/levels/\" +\n        event.target.value +\n        \"/spells/\",\n      method: \"GET\",\n      responseType: \"json\",\n    }).then((spells) => {\n      // set states to\n      this.setState({\n        spells: spells.data.results,\n        changingText: this.state.charClass, //display class\n        count: spells.data.count, //get number of spells to display 'no spells' when there's no spells\n      });\n    });\n  };\n\n  // makes an api call using the specific spell url as a partametes\n  spellInfo = (e) => {\n    window.scroll({ top: 0 });\n    axios({\n      url: \"https://www.dnd5eapi.co\" + e.target.value,\n      method: \"GET\",\n      responseType: \"json\",\n    }).then((spell) => {\n      const spellName = spell.data;\n      this.setState({\n        // this set all the states for the spellbox\n        name: spellName.name,\n        materials: spellName.material,\n        description: spellName[\"desc\"],\n        higherLevel: spellName[\"higher_level\"],\n        spellBoxShowing: true,\n      });\n    });\n  };\n\n  // reloads the page to change the class\n  reset = () => {\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main className=\"wrapper flexContainer\">\n          <section className=\"instructions\">\n            {/* site info */}\n            <h1>Spell Compendium</h1>\n            <h3>{this.state.changingText}</h3>\n            <h4>{this.state.levelDisplay}</h4>\n\n            {/* spell info */}\n            {this.state.spellBoxShowing ? (\n              <Info\n                name={this.state.name}\n                material={this.state.materials}\n                desc={this.state.description}\n                higher={this.state.higherLevel}\n              />\n            ) : null}\n\n            {/* reset button */}\n            {this.state.resetShowing ? (\n              <button className=\"reset\" onClick={this.reset}>\n                Change Class\n              </button>\n            ) : null}\n          </section>\n          <section className=\"options \">\n            <div className=\"levelClass\">\n              {/* Class buttons */}\n              <ClassButtons\n                handleClick={this.handleClick}\n                disabled={this.state.disabled}\n              />\n\n              {/* level buttons */}\n              {this.state.isShowing ? (\n                <LevelButtons storeLevel={this.storeLevel} />\n              ) : null}\n            </div>\n\n            <div className=\"spells\">\n              {/* spell buttons */}\n              {this.state.isAlsoShowing\n                ? // map out the spells and display them\n                  this.state.spells.map((spell, index) => {\n                    return (\n                      <Fragment key={index}>\n                        <button onClick={this.spellInfo} value={spell.url}>\n                          {spell.name}\n                        </button>\n                      </Fragment>\n                    );\n                  })\n                : null}\n              {/* no spells display */}\n              {this.state.count === 0 && this.state.isAlsoShowing ? (\n                <h2>NO SPELLS</h2>\n              ) : null}\n            </div>\n          </section>\n        </main>\n        {/* footer */}\n        <footer>\n          This site was made by{\" \"}\n          <a href=\"https://scottcarterdev.com\">Scott Carter</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}